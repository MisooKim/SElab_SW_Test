input-language C/C++
decl-version 2.0
var-comparability implicit

ppt ..main():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 9
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
    comparability 10
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 11

ppt ..main():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable argc
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 9
  variable argv
    var-kind variable
    rep-type hashcode
    dec-type char**
    flags is_param 
    comparability 10
  variable argv[..]
    var-kind array
    enclosing-var argv
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 11
  variable return
    var-kind variable
    rep-type int
    dec-type int
    comparability 12

ppt ..open_character_stream():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable FILENAME
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
    comparability 9

ppt ..open_character_stream():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable FILENAME
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
    comparability 9
  variable return
    var-kind variable
    rep-type hashcode
    dec-type stream_type*
    comparability 10
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 11
  variable return[..].fp
    var-kind field fp
    enclosing-var return[..]
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 12
  variable return[..].fp[0]
    var-kind field [0]
    enclosing-var return[..].fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 13
  variable return[..].stream_ind
    var-kind field stream_ind
    enclosing-var return[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 14
  variable return[..].stream
    var-kind field stream
    enclosing-var return[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 15

ppt ..get_char():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable stream_ptr
    var-kind variable
    rep-type hashcode
    dec-type stream_type*
    flags is_param 
    comparability 9
  variable stream_ptr[..]
    var-kind array
    enclosing-var stream_ptr
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 10
  variable stream_ptr[..].fp
    var-kind field fp
    enclosing-var stream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 11
  variable stream_ptr[..].fp[0]
    var-kind field [0]
    enclosing-var stream_ptr[..].fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 12
  variable stream_ptr[..].stream_ind
    var-kind field stream_ind
    enclosing-var stream_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 13
  variable stream_ptr[..].stream
    var-kind field stream
    enclosing-var stream_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 14

ppt ..get_char():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable stream_ptr
    var-kind variable
    rep-type hashcode
    dec-type stream_type*
    flags is_param 
    comparability 9
  variable stream_ptr[..]
    var-kind array
    enclosing-var stream_ptr
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 10
  variable stream_ptr[..].fp
    var-kind field fp
    enclosing-var stream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 11
  variable stream_ptr[..].fp[0]
    var-kind field [0]
    enclosing-var stream_ptr[..].fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 12
  variable stream_ptr[..].stream_ind
    var-kind field stream_ind
    enclosing-var stream_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 13
  variable stream_ptr[..].stream
    var-kind field stream
    enclosing-var stream_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 14
  variable return
    var-kind variable
    rep-type int
    dec-type char
    comparability 15

ppt ..is_end_of_character_stream():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable stream_ptr
    var-kind variable
    rep-type hashcode
    dec-type stream_type*
    flags is_param 
    comparability 9
  variable stream_ptr[..]
    var-kind array
    enclosing-var stream_ptr
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 10
  variable stream_ptr[..].fp
    var-kind field fp
    enclosing-var stream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 11
  variable stream_ptr[..].fp[0]
    var-kind field [0]
    enclosing-var stream_ptr[..].fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 12
  variable stream_ptr[..].stream_ind
    var-kind field stream_ind
    enclosing-var stream_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 13
  variable stream_ptr[..].stream
    var-kind field stream
    enclosing-var stream_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 14

ppt ..is_end_of_character_stream():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable stream_ptr
    var-kind variable
    rep-type hashcode
    dec-type stream_type*
    flags is_param 
    comparability 9
  variable stream_ptr[..]
    var-kind array
    enclosing-var stream_ptr
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 10
  variable stream_ptr[..].fp
    var-kind field fp
    enclosing-var stream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 11
  variable stream_ptr[..].fp[0]
    var-kind field [0]
    enclosing-var stream_ptr[..].fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 12
  variable stream_ptr[..].stream_ind
    var-kind field stream_ind
    enclosing-var stream_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 13
  variable stream_ptr[..].stream
    var-kind field stream
    enclosing-var stream_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 14
  variable return
    var-kind variable
    rep-type int
    dec-type int
    comparability 15

ppt ..unget_char():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable ch
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
    comparability 9
  variable stream_ptr
    var-kind variable
    rep-type hashcode
    dec-type stream_type*
    flags is_param 
    comparability 10
  variable stream_ptr[..]
    var-kind array
    enclosing-var stream_ptr
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 11
  variable stream_ptr[..].fp
    var-kind field fp
    enclosing-var stream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 12
  variable stream_ptr[..].fp[0]
    var-kind field [0]
    enclosing-var stream_ptr[..].fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 13
  variable stream_ptr[..].stream_ind
    var-kind field stream_ind
    enclosing-var stream_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 14
  variable stream_ptr[..].stream
    var-kind field stream
    enclosing-var stream_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 15

ppt ..unget_char():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable ch
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
    comparability 9
  variable stream_ptr
    var-kind variable
    rep-type hashcode
    dec-type stream_type*
    flags is_param 
    comparability 10
  variable stream_ptr[..]
    var-kind array
    enclosing-var stream_ptr
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 11
  variable stream_ptr[..].fp
    var-kind field fp
    enclosing-var stream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 12
  variable stream_ptr[..].fp[0]
    var-kind field [0]
    enclosing-var stream_ptr[..].fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 13
  variable stream_ptr[..].stream_ind
    var-kind field stream_ind
    enclosing-var stream_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 14
  variable stream_ptr[..].stream
    var-kind field stream
    enclosing-var stream_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 15
  variable return
    var-kind variable
    rep-type int
    dec-type int
    comparability 16

ppt ..open_token_stream():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable FILENAME
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
    comparability 9

ppt ..open_token_stream():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable FILENAME
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
    comparability 9
  variable return
    var-kind variable
    rep-type hashcode
    dec-type token_stream_type*
    comparability 10
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type token_stream_type[]
    comparability 11
  variable return[..].ch_stream
    var-kind field ch_stream
    enclosing-var return[..]
    array 1
    rep-type hashcode[]
    dec-type stream_type*[]
    comparability 12
  variable return[..].ch_stream[0]
    var-kind field [0]
    enclosing-var return[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 13
  variable return[..].ch_stream->fp
    var-kind field fp
    enclosing-var return[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 14
  variable return[..].ch_stream->fp[0]
    var-kind field [0]
    enclosing-var return[..].ch_stream->fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 15
  variable return[..].ch_stream->stream_ind
    var-kind field stream_ind
    enclosing-var return[..].ch_stream
    array 1
    rep-type int[]
    dec-type int[]
    comparability 16
  variable return[..].ch_stream->stream
    var-kind field stream
    enclosing-var return[..].ch_stream
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 17

ppt ..get_token():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable tstream_ptr
    var-kind variable
    rep-type hashcode
    dec-type token_stream_type*
    flags is_param 
    comparability 9
  variable tstream_ptr[..]
    var-kind array
    enclosing-var tstream_ptr
    array 1
    rep-type hashcode[]
    dec-type token_stream_type[]
    comparability 10
  variable tstream_ptr[..].ch_stream
    var-kind field ch_stream
    enclosing-var tstream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type stream_type*[]
    comparability 11
  variable tstream_ptr[..].ch_stream[0]
    var-kind field [0]
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 12
  variable tstream_ptr[..].ch_stream->fp
    var-kind field fp
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 13
  variable tstream_ptr[..].ch_stream->fp[0]
    var-kind field [0]
    enclosing-var tstream_ptr[..].ch_stream->fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 14
  variable tstream_ptr[..].ch_stream->stream_ind
    var-kind field stream_ind
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type int[]
    dec-type int[]
    comparability 15
  variable tstream_ptr[..].ch_stream->stream
    var-kind field stream
    enclosing-var tstream_ptr[..].ch_stream
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 16

ppt ..get_token():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable tstream_ptr
    var-kind variable
    rep-type hashcode
    dec-type token_stream_type*
    flags is_param 
    comparability 9
  variable tstream_ptr[..]
    var-kind array
    enclosing-var tstream_ptr
    array 1
    rep-type hashcode[]
    dec-type token_stream_type[]
    comparability 10
  variable tstream_ptr[..].ch_stream
    var-kind field ch_stream
    enclosing-var tstream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type stream_type*[]
    comparability 11
  variable tstream_ptr[..].ch_stream[0]
    var-kind field [0]
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 12
  variable tstream_ptr[..].ch_stream->fp
    var-kind field fp
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 13
  variable tstream_ptr[..].ch_stream->fp[0]
    var-kind field [0]
    enclosing-var tstream_ptr[..].ch_stream->fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 14
  variable tstream_ptr[..].ch_stream->stream_ind
    var-kind field stream_ind
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type int[]
    dec-type int[]
    comparability 15
  variable tstream_ptr[..].ch_stream->stream
    var-kind field stream
    enclosing-var tstream_ptr[..].ch_stream
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 16
  variable return
    var-kind variable
    rep-type hashcode
    dec-type token_type*
    comparability 17
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type token_type[]
    comparability 18
  variable return[..].token_id
    var-kind field token_id
    enclosing-var return[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 19
  variable return[..].token_string
    var-kind field token_string
    enclosing-var return[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 20

ppt print_tokens.c.numeric_case():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable tstream_ptr
    var-kind variable
    rep-type hashcode
    dec-type token_stream_type*
    flags is_param 
    comparability 9
  variable tstream_ptr[..]
    var-kind array
    enclosing-var tstream_ptr
    array 1
    rep-type hashcode[]
    dec-type token_stream_type[]
    comparability 10
  variable tstream_ptr[..].ch_stream
    var-kind field ch_stream
    enclosing-var tstream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type stream_type*[]
    comparability 11
  variable tstream_ptr[..].ch_stream[0]
    var-kind field [0]
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 12
  variable tstream_ptr[..].ch_stream->fp
    var-kind field fp
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 13
  variable tstream_ptr[..].ch_stream->fp[0]
    var-kind field [0]
    enclosing-var tstream_ptr[..].ch_stream->fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 14
  variable tstream_ptr[..].ch_stream->stream_ind
    var-kind field stream_ind
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type int[]
    dec-type int[]
    comparability 15
  variable tstream_ptr[..].ch_stream->stream
    var-kind field stream
    enclosing-var tstream_ptr[..].ch_stream
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 16
  variable token_ptr
    var-kind variable
    rep-type hashcode
    dec-type token_type*
    flags is_param 
    comparability 17
  variable token_ptr[..]
    var-kind array
    enclosing-var token_ptr
    array 1
    rep-type hashcode[]
    dec-type token_type[]
    comparability 18
  variable token_ptr[..].token_id
    var-kind field token_id
    enclosing-var token_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 19
  variable token_ptr[..].token_string
    var-kind field token_string
    enclosing-var token_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 20
  variable ch
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
    comparability 21
  variable token_str
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
    comparability 22
  variable token_ind
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 23

ppt print_tokens.c.numeric_case():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable tstream_ptr
    var-kind variable
    rep-type hashcode
    dec-type token_stream_type*
    flags is_param 
    comparability 9
  variable tstream_ptr[..]
    var-kind array
    enclosing-var tstream_ptr
    array 1
    rep-type hashcode[]
    dec-type token_stream_type[]
    comparability 10
  variable tstream_ptr[..].ch_stream
    var-kind field ch_stream
    enclosing-var tstream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type stream_type*[]
    comparability 11
  variable tstream_ptr[..].ch_stream[0]
    var-kind field [0]
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 12
  variable tstream_ptr[..].ch_stream->fp
    var-kind field fp
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 13
  variable tstream_ptr[..].ch_stream->fp[0]
    var-kind field [0]
    enclosing-var tstream_ptr[..].ch_stream->fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 14
  variable tstream_ptr[..].ch_stream->stream_ind
    var-kind field stream_ind
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type int[]
    dec-type int[]
    comparability 15
  variable tstream_ptr[..].ch_stream->stream
    var-kind field stream
    enclosing-var tstream_ptr[..].ch_stream
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 16
  variable token_ptr
    var-kind variable
    rep-type hashcode
    dec-type token_type*
    flags is_param 
    comparability 17
  variable token_ptr[..]
    var-kind array
    enclosing-var token_ptr
    array 1
    rep-type hashcode[]
    dec-type token_type[]
    comparability 18
  variable token_ptr[..].token_id
    var-kind field token_id
    enclosing-var token_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 19
  variable token_ptr[..].token_string
    var-kind field token_string
    enclosing-var token_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 20
  variable ch
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
    comparability 21
  variable token_str
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
    comparability 22
  variable token_ind
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 23
  variable return
    var-kind variable
    rep-type hashcode
    dec-type token_type*
    comparability 24
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type token_type[]
    comparability 25
  variable return[..].token_id
    var-kind field token_id
    enclosing-var return[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 26
  variable return[..].token_string
    var-kind field token_string
    enclosing-var return[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 27

ppt print_tokens.c.error_or_eof_case():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable tstream_ptr
    var-kind variable
    rep-type hashcode
    dec-type token_stream_type*
    flags is_param 
    comparability 9
  variable tstream_ptr[..]
    var-kind array
    enclosing-var tstream_ptr
    array 1
    rep-type hashcode[]
    dec-type token_stream_type[]
    comparability 10
  variable tstream_ptr[..].ch_stream
    var-kind field ch_stream
    enclosing-var tstream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type stream_type*[]
    comparability 11
  variable tstream_ptr[..].ch_stream[0]
    var-kind field [0]
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 12
  variable tstream_ptr[..].ch_stream->fp
    var-kind field fp
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 13
  variable tstream_ptr[..].ch_stream->fp[0]
    var-kind field [0]
    enclosing-var tstream_ptr[..].ch_stream->fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 14
  variable tstream_ptr[..].ch_stream->stream_ind
    var-kind field stream_ind
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type int[]
    dec-type int[]
    comparability 15
  variable tstream_ptr[..].ch_stream->stream
    var-kind field stream
    enclosing-var tstream_ptr[..].ch_stream
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 16
  variable token_ptr
    var-kind variable
    rep-type hashcode
    dec-type token_type*
    flags is_param 
    comparability 17
  variable token_ptr[..]
    var-kind array
    enclosing-var token_ptr
    array 1
    rep-type hashcode[]
    dec-type token_type[]
    comparability 18
  variable token_ptr[..].token_id
    var-kind field token_id
    enclosing-var token_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 19
  variable token_ptr[..].token_string
    var-kind field token_string
    enclosing-var token_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 20
  variable cu_state
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 21
  variable token_str
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
    comparability 22
  variable token_ind
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 23
  variable ch
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
    comparability 24

ppt print_tokens.c.error_or_eof_case():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable tstream_ptr
    var-kind variable
    rep-type hashcode
    dec-type token_stream_type*
    flags is_param 
    comparability 9
  variable tstream_ptr[..]
    var-kind array
    enclosing-var tstream_ptr
    array 1
    rep-type hashcode[]
    dec-type token_stream_type[]
    comparability 10
  variable tstream_ptr[..].ch_stream
    var-kind field ch_stream
    enclosing-var tstream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type stream_type*[]
    comparability 11
  variable tstream_ptr[..].ch_stream[0]
    var-kind field [0]
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 12
  variable tstream_ptr[..].ch_stream->fp
    var-kind field fp
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 13
  variable tstream_ptr[..].ch_stream->fp[0]
    var-kind field [0]
    enclosing-var tstream_ptr[..].ch_stream->fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 14
  variable tstream_ptr[..].ch_stream->stream_ind
    var-kind field stream_ind
    enclosing-var tstream_ptr[..].ch_stream
    array 1
    rep-type int[]
    dec-type int[]
    comparability 15
  variable tstream_ptr[..].ch_stream->stream
    var-kind field stream
    enclosing-var tstream_ptr[..].ch_stream
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 16
  variable token_ptr
    var-kind variable
    rep-type hashcode
    dec-type token_type*
    flags is_param 
    comparability 17
  variable token_ptr[..]
    var-kind array
    enclosing-var token_ptr
    array 1
    rep-type hashcode[]
    dec-type token_type[]
    comparability 18
  variable token_ptr[..].token_id
    var-kind field token_id
    enclosing-var token_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 19
  variable token_ptr[..].token_string
    var-kind field token_string
    enclosing-var token_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 20
  variable cu_state
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 21
  variable token_str
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
    comparability 22
  variable token_ind
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 23
  variable ch
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
    comparability 24
  variable return
    var-kind variable
    rep-type hashcode
    dec-type token_type*
    comparability 25
  variable return[..]
    var-kind array
    enclosing-var return
    array 1
    rep-type hashcode[]
    dec-type token_type[]
    comparability 26
  variable return[..].token_id
    var-kind field token_id
    enclosing-var return[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 27
  variable return[..].token_string
    var-kind field token_string
    enclosing-var return[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 28

ppt print_tokens.c.check_delimiter():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable ch
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
    comparability 9

ppt print_tokens.c.check_delimiter():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable ch
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
    comparability 9
  variable return
    var-kind variable
    rep-type int
    dec-type int
    comparability 10

ppt print_tokens.c.keyword():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable state
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 9

ppt print_tokens.c.keyword():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable state
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 9
  variable return
    var-kind variable
    rep-type int
    dec-type int
    comparability 10

ppt print_tokens.c.special():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable state
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 9

ppt print_tokens.c.special():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable state
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 9
  variable return
    var-kind variable
    rep-type int
    dec-type int
    comparability 10

ppt print_tokens.c.skip():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable stream_ptr
    var-kind variable
    rep-type hashcode
    dec-type stream_type*
    flags is_param 
    comparability 9
  variable stream_ptr[..]
    var-kind array
    enclosing-var stream_ptr
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 10
  variable stream_ptr[..].fp
    var-kind field fp
    enclosing-var stream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 11
  variable stream_ptr[..].fp[0]
    var-kind field [0]
    enclosing-var stream_ptr[..].fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 12
  variable stream_ptr[..].stream_ind
    var-kind field stream_ind
    enclosing-var stream_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 13
  variable stream_ptr[..].stream
    var-kind field stream
    enclosing-var stream_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 14

ppt print_tokens.c.skip():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable stream_ptr
    var-kind variable
    rep-type hashcode
    dec-type stream_type*
    flags is_param 
    comparability 9
  variable stream_ptr[..]
    var-kind array
    enclosing-var stream_ptr
    array 1
    rep-type hashcode[]
    dec-type stream_type[]
    comparability 10
  variable stream_ptr[..].fp
    var-kind field fp
    enclosing-var stream_ptr[..]
    array 1
    rep-type hashcode[]
    dec-type void*[]
    comparability 11
  variable stream_ptr[..].fp[0]
    var-kind field [0]
    enclosing-var stream_ptr[..].fp
    array 1
    rep-type hashcode[]
    dec-type void[]
    comparability 12
  variable stream_ptr[..].stream_ind
    var-kind field stream_ind
    enclosing-var stream_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 13
  variable stream_ptr[..].stream
    var-kind field stream
    enclosing-var stream_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 14
  variable return
    var-kind variable
    rep-type int
    dec-type int
    comparability 15

ppt print_tokens.c.constant():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable state
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 9
  variable token_str
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
    comparability 10
  variable token_ind
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 11

ppt print_tokens.c.constant():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable state
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 9
  variable token_str
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
    comparability 10
  variable token_ind
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 11
  variable return
    var-kind variable
    rep-type int
    dec-type int
    comparability 12

ppt print_tokens.c.next_state():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable state
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 9
  variable ch
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
    comparability 10

ppt print_tokens.c.next_state():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable state
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 9
  variable ch
    var-kind variable
    rep-type int
    dec-type char
    flags is_param 
    comparability 10
  variable return
    var-kind variable
    rep-type int
    dec-type int
    comparability 11

ppt ..is_eof_token():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable t
    var-kind variable
    rep-type hashcode
    dec-type token_type*
    flags is_param 
    comparability 9
  variable t[..]
    var-kind array
    enclosing-var t
    array 1
    rep-type hashcode[]
    dec-type token_type[]
    comparability 10
  variable t[..].token_id
    var-kind field token_id
    enclosing-var t[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 11
  variable t[..].token_string
    var-kind field token_string
    enclosing-var t[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 12

ppt ..is_eof_token():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable t
    var-kind variable
    rep-type hashcode
    dec-type token_type*
    flags is_param 
    comparability 9
  variable t[..]
    var-kind array
    enclosing-var t
    array 1
    rep-type hashcode[]
    dec-type token_type[]
    comparability 10
  variable t[..].token_id
    var-kind field token_id
    enclosing-var t[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 11
  variable t[..].token_string
    var-kind field token_string
    enclosing-var t[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 12
  variable return
    var-kind variable
    rep-type int
    dec-type int
    comparability 13

ppt ..print_token():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable token_ptr
    var-kind variable
    rep-type hashcode
    dec-type token_type*
    flags is_param 
    comparability 9
  variable token_ptr[..]
    var-kind array
    enclosing-var token_ptr
    array 1
    rep-type hashcode[]
    dec-type token_type[]
    comparability 10
  variable token_ptr[..].token_id
    var-kind field token_id
    enclosing-var token_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 11
  variable token_ptr[..].token_string
    var-kind field token_string
    enclosing-var token_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 12

ppt ..print_token():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable token_ptr
    var-kind variable
    rep-type hashcode
    dec-type token_type*
    flags is_param 
    comparability 9
  variable token_ptr[..]
    var-kind array
    enclosing-var token_ptr
    array 1
    rep-type hashcode[]
    dec-type token_type[]
    comparability 10
  variable token_ptr[..].token_id
    var-kind field token_id
    enclosing-var token_ptr[..]
    array 1
    rep-type int[]
    dec-type int[]
    comparability 11
  variable token_ptr[..].token_string
    var-kind field token_string
    enclosing-var token_ptr[..]
    reference-type offset
    array 1
    rep-type string[]
    dec-type char*[]
    comparability 12
  variable return
    var-kind variable
    rep-type int
    dec-type int
    comparability 13

ppt print_tokens.c.get_actual_token():::ENTER
  ppt-type enter
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable token_str
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
    comparability 9
  variable token_ind
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 10

ppt print_tokens.c.get_actual_token():::EXIT0
  ppt-type subexit
  variable ::default1
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 1
  variable ::default1[..]
    var-kind array
    enclosing-var ::default1
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 2
  variable ::base
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 3
  variable ::base[..]
    var-kind array
    enclosing-var ::base
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 4
  variable ::next
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 5
  variable ::next[..]
    var-kind array
    enclosing-var ::next
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 6
  variable ::check
    var-kind variable
    rep-type hashcode
    dec-type int*
    flags non_null 
    comparability 7
  variable ::check[..]
    var-kind array
    enclosing-var ::check
    reference-type offset
    array 1
    rep-type int[]
    dec-type int[]
    comparability 8
  variable token_str
    var-kind variable
    rep-type string
    dec-type char*
    flags is_param 
    comparability 9
  variable token_ind
    var-kind variable
    rep-type int
    dec-type int
    flags is_param 
    comparability 10
  variable return
    var-kind variable
    rep-type int
    dec-type int
    comparability 11

